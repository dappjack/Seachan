import type { Principal } from '@dfinity/principal';
import type { ActorMethod } from '@dfinity/agent';

export type AssocList = [] | [[[Key, PostType], List]];
export interface BoardDescType {
  'id' : number,
  'isShownInHeader' : boolean,
  'isGated' : boolean,
  'showFlags' : boolean,
  'timeStamp' : bigint,
  'isListed' : boolean,
  'name' : string,
  'isInDevelopment' : boolean,
  'textOnly' : boolean,
  'latestActivityTimeStamp' : bigint,
  'gateToken' : string,
  'gateType' : string,
  'gateTokenAmount' : number,
  'threadCount' : number,
  'abbreviation' : string,
  'isSfw' : boolean,
  'forceAnonymity' : boolean,
}
export interface BoardType {
  'id' : number,
  'postCount' : number,
  'isShownInHeader' : boolean,
  'isGated' : boolean,
  'allFileSize' : number,
  'showFlags' : boolean,
  'timeStamp' : bigint,
  'ownerPrincipal' : Principal,
  'isListed' : boolean,
  'name' : string,
  'isInDevelopment' : boolean,
  'textOnly' : boolean,
  'allFileCount' : number,
  'latestActivityTimeStamp' : bigint,
  'gateToken' : string,
  'gateType' : string,
  'gateTokenAmount' : number,
  'threadCount' : number,
  'abbreviation' : string,
  'isSfw' : boolean,
  'posts' : Trie,
  'forceAnonymity' : boolean,
  'nextPost' : number,
}
export interface Branch { 'left' : Trie, 'size' : bigint, 'right' : Trie }
export type Hash = number;
export type Id = number;
export interface Key { 'key' : number, 'hash' : Hash }
export interface Leaf { 'size' : bigint, 'keyvals' : AssocList }
export type List = [] | [[[Key, PostType], List]];
export interface NFTDetails { 'url' : string, 'index' : number }
export interface NftCollectionType {
  'icon' : string,
  'name' : string,
  'description' : string,
  'tokens' : Array<NFTDetails>,
  'standard' : string,
  'canisterId' : string,
}
export interface NftCollectionType__1 {
  'icon' : string,
  'name' : string,
  'description' : string,
  'tokens' : Array<NFTDetails>,
  'standard' : string,
  'canisterId' : string,
}
export interface PostType {
  'id' : number,
  'userName' : string,
  'reportCount' : number,
  'subject' : string,
  'timeStamp' : bigint,
  'body' : string,
  'ownerPrincipal' : Principal,
  'isOp' : boolean,
  'isStickied' : boolean,
  'fileCount' : number,
  'boardAbbreviation' : string,
  'posterGuid' : string,
  'latestActivityTimeStamp' : bigint,
  'fileName' : string,
  'filePath' : string,
  'fileSize' : number,
  'fileType' : string,
  'fileExtension' : string,
  'replyCount' : number,
  'replies' : Trie,
  'isLocked' : boolean,
  'userNameColor' : string,
}
export interface PostType__1 {
  'id' : number,
  'userName' : string,
  'reportCount' : number,
  'subject' : string,
  'timeStamp' : bigint,
  'body' : string,
  'ownerPrincipal' : Principal,
  'isOp' : boolean,
  'isStickied' : boolean,
  'fileCount' : number,
  'boardAbbreviation' : string,
  'posterGuid' : string,
  'latestActivityTimeStamp' : bigint,
  'fileName' : string,
  'filePath' : string,
  'fileSize' : number,
  'fileType' : string,
  'fileExtension' : string,
  'replyCount' : number,
  'replies' : Trie,
  'isLocked' : boolean,
  'userNameColor' : string,
}
export type Trie = { 'branch' : Branch } |
  { 'leaf' : Leaf } |
  { 'empty' : null };
export type UserId = number;
export interface UserType {
  'id' : number,
  'userName' : string,
  'principal' : string,
  'registrationTimeStamp' : bigint,
  'role' : string,
  'principalSource' : string,
  'icpBalance' : number,
  'nftCollection' : Array<NftCollectionType>,
}
export interface _SERVICE {
  'addUserNfts' : ActorMethod<
    [UserId, Array<NftCollectionType__1>],
    [] | [UserType],
  >,
  'createBoard' : ActorMethod<
    [
      {
        'isShownInHeader' : boolean,
        'isGated' : boolean,
        'showFlags' : boolean,
        'isListed' : boolean,
        'name' : string,
        'isInDevelopment' : boolean,
        'textOnly' : boolean,
        'gateToken' : string,
        'gateType' : string,
        'gateTokenAmount' : number,
        'abbreviation' : string,
        'isSfw' : boolean,
        'forceAnonymity' : boolean,
      },
    ],
    [] | [BoardType],
  >,
  'createReply' : ActorMethod<
    [
      {
        'userName' : string,
        'subject' : string,
        'body' : string,
        'isStickied' : boolean,
        'boardAbbreviation' : string,
        'posterGuid' : string,
        'fileName' : string,
        'filePath' : string,
        'fileSize' : number,
        'fileType' : string,
        'fileExtension' : string,
        'isLocked' : boolean,
        'userNameColor' : string,
        'threadId' : number,
      },
    ],
    [] | [PostType__1],
  >,
  'createThread' : ActorMethod<
    [
      {
        'userName' : string,
        'subject' : string,
        'body' : string,
        'isStickied' : boolean,
        'boardAbbreviation' : string,
        'posterGuid' : string,
        'fileName' : string,
        'filePath' : string,
        'fileSize' : number,
        'fileType' : string,
        'fileExtension' : string,
        'isLocked' : boolean,
        'userNameColor' : string,
      },
    ],
    [] | [PostType__1],
  >,
  'createUser' : ActorMethod<[Principal, string, number], [] | [UserType]>,
  'deleteAllBoards' : ActorMethod<[], undefined>,
  'deleteAllReplies' : ActorMethod<[], undefined>,
  'deleteAllThreads' : ActorMethod<[], undefined>,
  'deleteAllUsers' : ActorMethod<[], undefined>,
  'deleteBoard' : ActorMethod<[string], undefined>,
  'deleteReplies' : ActorMethod<[string, number], undefined>,
  'deleteReply' : ActorMethod<[string, number, number], undefined>,
  'deleteThread' : ActorMethod<[string, number], undefined>,
  'deleteThreads' : ActorMethod<[string], undefined>,
  'findUserByPrincipal' : ActorMethod<[string], [] | [UserType]>,
  'getCallerId' : ActorMethod<[], Principal>,
  'getCycleBalance' : ActorMethod<[], bigint>,
  'isUniqueAbbreviation' : ActorMethod<[string], boolean>,
  'listBoardThreads' : ActorMethod<[string], Array<PostType__1>>,
  'listBoards' : ActorMethod<[], Array<BoardDescType>>,
  'listHeaderBoards' : ActorMethod<[], Array<BoardDescType>>,
  'listThreadPosts' : ActorMethod<[string, number], Array<[] | [PostType__1]>>,
  'listUnListedBoards' : ActorMethod<[], Array<BoardDescType>>,
  'listUsers' : ActorMethod<[], Array<[UserId, UserType]>>,
  'makeMod' : ActorMethod<[UserId, string], [] | [UserType]>,
  'principalToSubAccount' : ActorMethod<[Principal], Array<number>>,
  'readBoard' : ActorMethod<[string], [] | [BoardType]>,
  'readBoardCount' : ActorMethod<[], bigint>,
  'readBoardDesc' : ActorMethod<[string], [] | [BoardDescType]>,
  'readListedBoardCount' : ActorMethod<[], bigint>,
  'readNextBoard' : ActorMethod<[], number>,
  'readNextBoardPost' : ActorMethod<[string], number>,
  'readNextPost' : ActorMethod<[string], number>,
  'readNextUser' : ActorMethod<[], UserId>,
  'readUnlistedBoardCount' : ActorMethod<[], bigint>,
  'readUserCount' : ActorMethod<[], bigint>,
  'reportReply' : ActorMethod<
    [number, number, boolean, string, string],
    undefined,
  >,
  'reportThread' : ActorMethod<[number, string, string], undefined>,
  'updateBoard' : ActorMethod<[string, BoardType], undefined>,
  'updateLatestPost' : ActorMethod<[string, bigint], undefined>,
  'updateUserBalances' : ActorMethod<[Id, number], [] | [UserType]>,
}
