export const idlFactory = ({ IDL }) => {
  const List = IDL.Rec();
  const Trie = IDL.Rec();
  const UserId = IDL.Nat32;
  const NFTDetails = IDL.Record({ 'url' : IDL.Text, 'index' : IDL.Nat32 });
  const NftCollectionType__1 = IDL.Record({
    'icon' : IDL.Text,
    'name' : IDL.Text,
    'description' : IDL.Text,
    'tokens' : IDL.Vec(NFTDetails),
    'standard' : IDL.Text,
    'canisterId' : IDL.Text,
  });
  const NftCollectionType = IDL.Record({
    'icon' : IDL.Text,
    'name' : IDL.Text,
    'description' : IDL.Text,
    'tokens' : IDL.Vec(NFTDetails),
    'standard' : IDL.Text,
    'canisterId' : IDL.Text,
  });
  const UserType = IDL.Record({
    'id' : IDL.Nat32,
    'userName' : IDL.Text,
    'principal' : IDL.Text,
    'registrationTimeStamp' : IDL.Int,
    'role' : IDL.Text,
    'principalSource' : IDL.Text,
    'icpBalance' : IDL.Float64,
    'nftCollection' : IDL.Vec(NftCollectionType),
  });
  const Branch = IDL.Record({
    'left' : Trie,
    'size' : IDL.Nat,
    'right' : Trie,
  });
  const Hash = IDL.Nat32;
  const Key = IDL.Record({ 'key' : IDL.Nat32, 'hash' : Hash });
  const PostType = IDL.Record({
    'id' : IDL.Nat32,
    'userName' : IDL.Text,
    'reportCount' : IDL.Nat32,
    'subject' : IDL.Text,
    'timeStamp' : IDL.Int,
    'body' : IDL.Text,
    'ownerPrincipal' : IDL.Principal,
    'isOp' : IDL.Bool,
    'isStickied' : IDL.Bool,
    'fileCount' : IDL.Nat32,
    'boardAbbreviation' : IDL.Text,
    'posterGuid' : IDL.Text,
    'latestActivityTimeStamp' : IDL.Int,
    'fileName' : IDL.Text,
    'filePath' : IDL.Text,
    'fileSize' : IDL.Nat32,
    'fileType' : IDL.Text,
    'fileExtension' : IDL.Text,
    'replyCount' : IDL.Nat32,
    'replies' : Trie,
    'isLocked' : IDL.Bool,
    'userNameColor' : IDL.Text,
  });
  List.fill(IDL.Opt(IDL.Tuple(IDL.Tuple(Key, PostType), List)));
  const AssocList = IDL.Opt(IDL.Tuple(IDL.Tuple(Key, PostType), List));
  const Leaf = IDL.Record({ 'size' : IDL.Nat, 'keyvals' : AssocList });
  Trie.fill(
    IDL.Variant({ 'branch' : Branch, 'leaf' : Leaf, 'empty' : IDL.Null })
  );
  const BoardType = IDL.Record({
    'id' : IDL.Nat32,
    'postCount' : IDL.Nat32,
    'isShownInHeader' : IDL.Bool,
    'isGated' : IDL.Bool,
    'allFileSize' : IDL.Nat32,
    'showFlags' : IDL.Bool,
    'timeStamp' : IDL.Int,
    'ownerPrincipal' : IDL.Principal,
    'isListed' : IDL.Bool,
    'name' : IDL.Text,
    'isInDevelopment' : IDL.Bool,
    'textOnly' : IDL.Bool,
    'allFileCount' : IDL.Nat32,
    'latestActivityTimeStamp' : IDL.Int,
    'gateToken' : IDL.Text,
    'gateType' : IDL.Text,
    'gateTokenAmount' : IDL.Nat32,
    'threadCount' : IDL.Nat32,
    'abbreviation' : IDL.Text,
    'isSfw' : IDL.Bool,
    'posts' : Trie,
    'forceAnonymity' : IDL.Bool,
    'nextPost' : IDL.Nat32,
  });
  const PostType__1 = IDL.Record({
    'id' : IDL.Nat32,
    'userName' : IDL.Text,
    'reportCount' : IDL.Nat32,
    'subject' : IDL.Text,
    'timeStamp' : IDL.Int,
    'body' : IDL.Text,
    'ownerPrincipal' : IDL.Principal,
    'isOp' : IDL.Bool,
    'isStickied' : IDL.Bool,
    'fileCount' : IDL.Nat32,
    'boardAbbreviation' : IDL.Text,
    'posterGuid' : IDL.Text,
    'latestActivityTimeStamp' : IDL.Int,
    'fileName' : IDL.Text,
    'filePath' : IDL.Text,
    'fileSize' : IDL.Nat32,
    'fileType' : IDL.Text,
    'fileExtension' : IDL.Text,
    'replyCount' : IDL.Nat32,
    'replies' : Trie,
    'isLocked' : IDL.Bool,
    'userNameColor' : IDL.Text,
  });
  const BoardDescType = IDL.Record({
    'id' : IDL.Nat32,
    'isShownInHeader' : IDL.Bool,
    'isGated' : IDL.Bool,
    'showFlags' : IDL.Bool,
    'timeStamp' : IDL.Int,
    'isListed' : IDL.Bool,
    'name' : IDL.Text,
    'isInDevelopment' : IDL.Bool,
    'textOnly' : IDL.Bool,
    'latestActivityTimeStamp' : IDL.Int,
    'gateToken' : IDL.Text,
    'gateType' : IDL.Text,
    'gateTokenAmount' : IDL.Nat32,
    'threadCount' : IDL.Nat32,
    'abbreviation' : IDL.Text,
    'isSfw' : IDL.Bool,
    'forceAnonymity' : IDL.Bool,
  });
  const Id = IDL.Nat32;
  return IDL.Service({
    'addUserNfts' : IDL.Func(
        [UserId, IDL.Vec(NftCollectionType__1)],
        [IDL.Opt(UserType)],
        [],
      ),
    'createBoard' : IDL.Func(
        [
          IDL.Record({
            'isShownInHeader' : IDL.Bool,
            'isGated' : IDL.Bool,
            'showFlags' : IDL.Bool,
            'isListed' : IDL.Bool,
            'name' : IDL.Text,
            'isInDevelopment' : IDL.Bool,
            'textOnly' : IDL.Bool,
            'gateToken' : IDL.Text,
            'gateType' : IDL.Text,
            'gateTokenAmount' : IDL.Nat32,
            'abbreviation' : IDL.Text,
            'isSfw' : IDL.Bool,
            'forceAnonymity' : IDL.Bool,
          }),
        ],
        [IDL.Opt(BoardType)],
        [],
      ),
    'createReply' : IDL.Func(
        [
          IDL.Record({
            'userName' : IDL.Text,
            'subject' : IDL.Text,
            'body' : IDL.Text,
            'isStickied' : IDL.Bool,
            'boardAbbreviation' : IDL.Text,
            'posterGuid' : IDL.Text,
            'fileName' : IDL.Text,
            'filePath' : IDL.Text,
            'fileSize' : IDL.Nat32,
            'fileType' : IDL.Text,
            'fileExtension' : IDL.Text,
            'isLocked' : IDL.Bool,
            'userNameColor' : IDL.Text,
            'threadId' : IDL.Nat32,
          }),
        ],
        [IDL.Opt(PostType__1)],
        [],
      ),
    'createThread' : IDL.Func(
        [
          IDL.Record({
            'userName' : IDL.Text,
            'subject' : IDL.Text,
            'body' : IDL.Text,
            'isStickied' : IDL.Bool,
            'boardAbbreviation' : IDL.Text,
            'posterGuid' : IDL.Text,
            'fileName' : IDL.Text,
            'filePath' : IDL.Text,
            'fileSize' : IDL.Nat32,
            'fileType' : IDL.Text,
            'fileExtension' : IDL.Text,
            'isLocked' : IDL.Bool,
            'userNameColor' : IDL.Text,
          }),
        ],
        [IDL.Opt(PostType__1)],
        [],
      ),
    'createUser' : IDL.Func(
        [IDL.Principal, IDL.Text, IDL.Float64],
        [IDL.Opt(UserType)],
        [],
      ),
    'deleteAllBoards' : IDL.Func([], [], ['oneway']),
    'deleteAllReplies' : IDL.Func([], [], ['oneway']),
    'deleteAllThreads' : IDL.Func([], [], ['oneway']),
    'deleteAllUsers' : IDL.Func([], [], ['oneway']),
    'deleteBoard' : IDL.Func([IDL.Text], [], ['oneway']),
    'deleteReplies' : IDL.Func([IDL.Text, IDL.Nat32], [], ['oneway']),
    'deleteReply' : IDL.Func([IDL.Text, IDL.Nat32, IDL.Nat32], [], ['oneway']),
    'deleteThread' : IDL.Func([IDL.Text, IDL.Nat32], [], ['oneway']),
    'deleteThreads' : IDL.Func([IDL.Text], [], ['oneway']),
    'findUserByPrincipal' : IDL.Func(
        [IDL.Text],
        [IDL.Opt(UserType)],
        ['query'],
      ),
    'getCallerId' : IDL.Func([], [IDL.Principal], []),
    'getCycleBalance' : IDL.Func([], [IDL.Nat], []),
    'isUniqueAbbreviation' : IDL.Func([IDL.Text], [IDL.Bool], ['query']),
    'listBoardThreads' : IDL.Func([IDL.Text], [IDL.Vec(PostType__1)], []),
    'listBoards' : IDL.Func([], [IDL.Vec(BoardDescType)], ['query']),
    'listHeaderBoards' : IDL.Func([], [IDL.Vec(BoardDescType)], ['query']),
    'listThreadPosts' : IDL.Func(
        [IDL.Text, IDL.Nat32],
        [IDL.Vec(IDL.Opt(PostType__1))],
        [],
      ),
    'listUnListedBoards' : IDL.Func([], [IDL.Vec(BoardDescType)], ['query']),
    'listUsers' : IDL.Func(
        [],
        [IDL.Vec(IDL.Tuple(UserId, UserType))],
        ['query'],
      ),
    'makeMod' : IDL.Func([UserId, IDL.Text], [IDL.Opt(UserType)], []),
    'principalToSubAccount' : IDL.Func(
        [IDL.Principal],
        [IDL.Vec(IDL.Nat8)],
        [],
      ),
    'readBoard' : IDL.Func([IDL.Text], [IDL.Opt(BoardType)], ['query']),
    'readBoardCount' : IDL.Func([], [IDL.Nat], ['query']),
    'readBoardDesc' : IDL.Func([IDL.Text], [IDL.Opt(BoardDescType)], ['query']),
    'readListedBoardCount' : IDL.Func([], [IDL.Nat], ['query']),
    'readNextBoard' : IDL.Func([], [IDL.Nat32], ['query']),
    'readNextBoardPost' : IDL.Func([IDL.Text], [IDL.Nat32], ['query']),
    'readNextPost' : IDL.Func([IDL.Text], [IDL.Nat32], ['query']),
    'readNextUser' : IDL.Func([], [UserId], ['query']),
    'readUnlistedBoardCount' : IDL.Func([], [IDL.Nat], ['query']),
    'readUserCount' : IDL.Func([], [IDL.Nat], ['query']),
    'reportReply' : IDL.Func(
        [IDL.Nat32, IDL.Nat32, IDL.Bool, IDL.Text, IDL.Text],
        [],
        ['oneway'],
      ),
    'reportThread' : IDL.Func([IDL.Nat32, IDL.Text, IDL.Text], [], ['oneway']),
    'updateBoard' : IDL.Func([IDL.Text, BoardType], [], ['oneway']),
    'updateLatestPost' : IDL.Func([IDL.Text, IDL.Int], [], ['oneway']),
    'updateUserBalances' : IDL.Func([Id, IDL.Float64], [IDL.Opt(UserType)], []),
  });
};
export const init = ({ IDL }) => { return []; };
